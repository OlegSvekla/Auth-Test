// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ShuttleX.Aggregator.Ef;
using ShuttleX.Meas.Geos;

#nullable disable

namespace ShuttleX.Aggregator.Migrations
{
    [DbContext(typeof(GodContext))]
    [Migration("20241220174233_UpdatePaySysSubscriptionTypeEntity")]
    partial class UpdatePaySysSubscriptionTypeEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Auth.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Support",
                            NormalizedName = "SUPPORT",
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Auth.SessionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("RefreshTokenExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("RelatedSessionId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Auth.SignInAttemptEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CodeHash")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("SessionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SessionId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("SignInAttempts");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Auth.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LockoutCreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("LockoutCreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LockoutReason")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000001",
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "no-reply@shuttlex.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NO-REPLY@SHUTTLEX.COM",
                            NormalizedUserName = "00000000-0000-0000-0000-000000000001",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00000000-0000-0000-0000-000000000001",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "00000000-0000-0000-0000-000000000001"
                        });
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Auth.UserRoleEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        });
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Config.ZoneClosureTableNode", b =>
                {
                    b.Property<Guid>("AncestorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DescendantId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AncestorId", "DescendantId");

                    b.HasIndex("DescendantId");

                    b.ToTable("ZoneClosureTableNode");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Config.ZoneEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Geo>("CenterPoint")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IsoName")
                        .HasColumnType("text");

                    b.Property<string>("LocationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentZoneId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ParentZoneId");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Config.ZonePolygonGeoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Geo>("Geo")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<Guid>("ZoneId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ZoneId");

                    b.ToTable("ZonePolygonGeos");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Docs.DocBlobEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BlobName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DocEntityId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("ExpiresIn")
                        .HasColumnType("date");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("VerifiedBySupport")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DocEntityId");

                    b.HasIndex("ProfileId");

                    b.ToTable("DocBlobs");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Docs.DocEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DocType")
                        .HasColumnType("integer");

                    b.Property<Guid>("MetadataId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReviewerResponse")
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Docs");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Docs.DocMetadataEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FeKey")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.Property<int>("SubType")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ZoneId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ZoneId");

                    b.ToTable("DocMetadatas");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Lottery.EventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Lottery.PrizeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("FeKey")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<Guid?>("TicketId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WinnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("TicketId");

                    b.HasIndex("WinnerId");

                    b.ToTable("Prizes");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Lottery.TicketEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("TicketCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("OrderId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Notificator.NotificationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int[]>("NotificationTypes")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.CardEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("AccountOpeningDate")
                        .HasColumnType("date");

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CardholderName")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EncodedNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EncodedSecretNumber")
                        .HasColumnType("text");

                    b.Property<string>("Issuer")
                        .HasColumnType("text");

                    b.Property<string>("MaskedNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PaymentNetworkType")
                        .HasColumnType("text");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("ValidThruDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.ChargeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<string>("AuthCode")
                        .HasColumnType("text");

                    b.Property<string>("CardPlan")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Fee")
                        .HasColumnType("numeric");

                    b.Property<string>("IssuerBankCountry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IssuerBankName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MerchantAccount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MerchantSignature")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrderReference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentSystem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ProcessingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReasonCode")
                        .HasColumnType("integer");

                    b.Property<string>("RecToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TransactionStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Charges");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Common.IdempotencyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IdempotencyKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("IdempotencyKeyExpDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Common.PaymentSystemRecognizerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentSystemName")
                        .HasColumnType("text");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("PaymentSystemRecognizer");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Config.PaySysSubscriptionTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("SubscriptionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ZoneId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ZoneId");

                    b.ToTable("PaySysSubscriptionTypes");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Config.PaySysTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentSystemName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ZoneId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ZoneId");

                    b.ToTable("PaySysTypes");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Contractor.ContractorCustomerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContractorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PaySysCustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("PaySysType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.ToTable("ContractorCustomers");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Contractor.ContractorDebtSubscriptionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AmountOfContractorOwed")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ContractorCustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ContractorPaymentTransactionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("EndDateOfCurrentDebtPeriod")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NumberOfDebtSeries")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContractorCustomerId");

                    b.HasIndex("ContractorPaymentTransactionId")
                        .IsUnique();

                    b.ToTable("ContractorDebtSubscriptions");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Contractor.ContractorPaymentTransactionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset?>("CompletePaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ContractorCustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContractorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<Guid?>("PaySysPaymentId")
                        .HasColumnType("uuid");

                    b.Property<string>("PaySysType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("SagaPaymentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContractorCustomerId");

                    b.HasIndex("ContractorId");

                    b.HasIndex("SagaPaymentId")
                        .IsUnique();

                    b.ToTable("ContractorPaymentTransactions");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Contractor.ContractorSubscriptionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CanceledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ContractorCustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContractorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ContractorPaymentTransactionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContinues")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PaySysSubscriptionId")
                        .HasColumnType("uuid");

                    b.Property<string>("PaySysType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SubscriptionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContractorCustomerId");

                    b.HasIndex("ContractorId");

                    b.HasIndex("ContractorPaymentTransactionId")
                        .IsUnique();

                    b.ToTable("ContractorSubscriptions");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Contractor.Stripe.StripeContractorSubscriptionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CanceledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContinues")
                        .HasColumnType("boolean");

                    b.Property<string>("JsonAdditionalData")
                        .HasColumnType("jsonb");

                    b.Property<string>("PriceId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StripeContractorCustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StripeContractorPaymentTransactionId")
                        .HasColumnType("uuid");

                    b.Property<string>("SubscriptionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubscriptionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StripeContractorCustomerId");

                    b.HasIndex("StripeContractorPaymentTransactionId")
                        .IsUnique();

                    b.ToTable("StripeContractorSubscriptions");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Passenger.PassengerCustomerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PassengerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PaySysCustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("PaySysType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PassengerId");

                    b.ToTable("PassengerCustomers");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Passenger.PassengerPaymentTransactionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset?>("CompletePaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<Guid>("PassengerCustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PassengerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PaySysPaymentId")
                        .HasColumnType("uuid");

                    b.Property<string>("PaySysType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("SagaPaymentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PassengerCustomerId");

                    b.HasIndex("PassengerId");

                    b.HasIndex("SagaPaymentId")
                        .IsUnique();

                    b.ToTable("PassengerPaymentTransactions");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.RefundEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MerchantAccount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrderReference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReasonCode")
                        .HasColumnType("integer");

                    b.Property<string>("TransactionStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Refunds");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Saga.SagaPaymentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("SagaCompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("SagaStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SagaPayments");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Saga.SagaStepPaymentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalData")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<Guid>("SagaPaymentId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("StepEndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("StepStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StepStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SagaPaymentId");

                    b.ToTable("SagaStepPayments");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileAvatarEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BlobName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileAvatars");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileDriverLicenseCategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("DateOfExpiry")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateOfIssue")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DriverLicenseId")
                        .HasColumnType("uuid");

                    b.Property<string[]>("Restrictions")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DriverLicenseId");

                    b.ToTable("DriverLicenseCategories");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileDriverLicenseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Authority")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateOfExpiry")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateOfIssue")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DocId")
                        .HasColumnType("uuid");

                    b.Property<string>("DocNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DocType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OriginCountry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PatronymicName")
                        .HasColumnType("text");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("text");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<string[]>("Restrictions")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DocId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileDriverLicenses");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileEmailEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileEmails");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("RequireDocumentsUpdate")
                        .HasColumnType("boolean");

                    b.Property<string>("SocialSecurityNumber")
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileFirebaseTokenEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirebaseToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileFirebaseTokens");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileFirstNameEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileFirstNames");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileGeoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Geo>("Geo")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<int>("RotationDeg")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileGeos");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileInsurancesEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyIssuer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("DateOfExpiry")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DateOfIssue")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DocId")
                        .HasColumnType("uuid");

                    b.Property<string>("DocNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DocType")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ManifactureYear")
                        .HasColumnType("integer");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrigincCountry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Vin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DocId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileInsurances");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileLanguageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileLanguages");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileLastNameEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileLastNames");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Profile.ProfilePassportEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Authority")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateOfExpiry")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DateOfIssue")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DocId")
                        .HasColumnType("uuid");

                    b.Property<string>("DocNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DocType")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .HasColumnType("text");

                    b.Property<string>("OriginCountry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PassportDocType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PatronymicName")
                        .HasColumnType("text");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("text");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<string>("RecordNumber")
                        .HasColumnType("text");

                    b.Property<string>("SexType")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DocId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfilePassports");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Profile.ProfilePatronicNameEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfilePatronicNames");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Profile.ProfilePhoneEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfilePhones");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileVehicleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CapacitySm3")
                        .HasColumnType("integer");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ContractorVehicleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DocId")
                        .HasColumnType("uuid");

                    b.Property<string>("DocNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DocType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ManifactureYear")
                        .HasColumnType("integer");

                    b.Property<int>("MaxMassKg")
                        .HasColumnType("integer");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<string>("RecordNumber")
                        .HasColumnType("text");

                    b.Property<int>("SeatsNumber")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceMassKg")
                        .HasColumnType("integer");

                    b.Property<int>("StandingPlacesNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Vin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContractorVehicleId")
                        .IsUnique();

                    b.HasIndex("DocId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileVehicles");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileZoneEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ZoneId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("ZoneId");

                    b.ToTable("ProfileZones");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Rides.Contractor.ContractorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentWarnings")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("PrimaryTariffId")
                        .HasColumnType("uuid");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("TotalWorkShiftTimeSpan")
                        .HasColumnType("interval");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryTariffId");

                    b.ToTable("Contractors");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Rides.Contractor.ContractorSelectedTariffsEntity", b =>
                {
                    b.Property<Guid>("ContractorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TariffId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ContractorId", "TariffId");

                    b.HasIndex("TariffId");

                    b.ToTable("ContractorSelectedTariffs");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Rides.Contractor.ContractorStatEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BadAtmosphereCount")
                        .HasColumnType("integer");

                    b.Property<int>("BadDrivingCount")
                        .HasColumnType("integer");

                    b.Property<int>("CleanCarCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DirtyCarCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("EarnedToday")
                        .HasColumnType("numeric");

                    b.Property<int>("FriendlyDriverCount")
                        .HasColumnType("integer");

                    b.Property<int>("GoodDrivingCount")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("NiceAtmosphereCount")
                        .HasColumnType("integer");

                    b.Property<int>("RudeDriverCount")
                        .HasColumnType("integer");

                    b.Property<int>("TotalDislikesCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalEarnedForWholePeriod")
                        .HasColumnType("numeric");

                    b.Property<int>("TotalLikesCount")
                        .HasColumnType("integer");

                    b.Property<int>("TotalRidesCount")
                        .HasColumnType("integer");

                    b.Property<int>("TotalWarnings")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ContractorStats");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Rides.Contractor.ContractorVehicleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContractorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProfileVehicleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.ToTable("ContractorVehicles");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Rides.Contractor.ReceivedOfferContractorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContractorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("EstimatedArriveToPickUpDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EstimatedPreviousOrderArriveToDropOffDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OfferId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PickUpRouteId")
                        .HasColumnType("uuid");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("OfferId");

                    b.HasIndex("PickUpRouteId");

                    b.ToTable("ReceivedOfferContractors");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Rides.OfferEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DelayedTripDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DropOffAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Geo>("DropOffGeo")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("DropOffPlace")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DropOffZoneId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("EstimatedDropOffDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("EstimatedPrice")
                        .HasColumnType("numeric");

                    b.Property<float>("EstimatedTotalDistanceKm")
                        .HasColumnType("real");

                    b.Property<Guid>("PassengerId")
                        .HasColumnType("uuid");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PickUpAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Geo>("PickUpGeo")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("PickUpPlace")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PickUpZoneId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SagaPaymentId")
                        .HasColumnType("uuid");

                    b.Property<int>("SearchRadiusFactor")
                        .HasColumnType("integer");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TariffId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DropOffZoneId");

                    b.HasIndex("PassengerId");

                    b.HasIndex("PickUpZoneId");

                    b.HasIndex("SagaPaymentId");

                    b.HasIndex("TariffId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Rides.OfferStopPointEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<Guid>("OfferId")
                        .HasColumnType("uuid");

                    b.Property<string>("StopPointAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Geo>("StopPointGeo")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("StopPointZoneId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("StopPointZoneId");

                    b.ToTable("OfferStopPoints");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Rides.OrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Geo>("AcceptedOfferGeo")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("AcceptedOfferZoneId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("ArrivedToPickUpDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ContractorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DropOffAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Geo>("DropOffGeo")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("DropOffPlace")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DropOffZoneId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("EstimatedArriveToDropOffDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("EstimatedArriveToPickUpDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EstimatedPreviousOrderFinishDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("EstimatedPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset?>("FinishedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("InitiallyEstimatedArriveToDropOffDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("IsContractorLikedByPassenger")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPassengerLikedByContractor")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OfferId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Paid")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PassengerId")
                        .HasColumnType("uuid");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PickUpAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Geo>("PickUpGeo")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<TimeSpan?>("PickUpPaidWaitingTimeTimeSpan")
                        .HasColumnType("interval");

                    b.Property<string>("PickUpPlace")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PickUpZoneId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("PickedUpPassengerDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("PreviousOrderId")
                        .HasColumnType("uuid");

                    b.Property<Geo>("StartPointGeo")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("StartPointZoneId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("StartedProcessingOrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TariffId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("TotalFinalPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TotalPickUpPaidWaitingTimeFeePrice")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TotalStopPointsPaidWaitingTimeFeePrice")
                        .HasColumnType("numeric");

                    b.Property<TimeSpan?>("TotalStopPointsPaidWaitingTimeTimeSpan")
                        .HasColumnType("interval");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AcceptedOfferZoneId");

                    b.HasIndex("ContractorId");

                    b.HasIndex("DropOffZoneId");

                    b.HasIndex("OfferId")
                        .IsUnique();

                    b.HasIndex("PassengerId");

                    b.HasIndex("PickUpZoneId");

                    b.HasIndex("PreviousOrderId");

                    b.HasIndex("StartPointZoneId");

                    b.HasIndex("TariffId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Rides.OrderStopPointEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("ArrivedToStopPointDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EstimatedArriveToStopPointDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("PickedUpPassengerDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StopPointAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Geo>("StopPointGeo")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<TimeSpan?>("StopPointPaidWaitingTimeTimeSpan")
                        .HasColumnType("interval");

                    b.Property<Guid>("StopPointZoneId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("TotalStopPointPaidWaitingTimeFeePrice")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("StopPointZoneId");

                    b.ToTable("OrderStopPoints");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Rides.Passenger.PassengerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalDislikesCount")
                        .HasColumnType("integer");

                    b.Property<int>("TotalLikesCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Rides.TariffEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AirportFees")
                        .HasColumnType("numeric");

                    b.Property<decimal>("BookingFee")
                        .HasColumnType("numeric");

                    b.Property<decimal>("CostPerKilometer")
                        .HasColumnType("numeric");

                    b.Property<decimal>("CostPerMinute")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("DelayedTripCancelPenalty")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FeKey")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("FreeWaitingTimeMin")
                        .HasColumnType("integer");

                    b.Property<int>("MaxDistanceToAllowArrivalForContractorMeter")
                        .HasColumnType("integer");

                    b.Property<int>("MaxLuggagesCount")
                        .HasColumnType("integer");

                    b.Property<int>("MaxSeatsCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("MaximumFare")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MinimumFare")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PaidWaitingTimeFeePricePerMin")
                        .HasColumnType("numeric");

                    b.Property<float[]>("SearchRadiusFactors")
                        .IsRequired()
                        .HasColumnType("real[]");

                    b.Property<int>("SearchRadiusMeter")
                        .HasColumnType("integer");

                    b.Property<decimal>("ServiceFee")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TollFare")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TripMinimumPenalty")
                        .HasColumnType("numeric");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WaitingOfferForAcceptenceByContractorSec")
                        .HasColumnType("integer");

                    b.Property<Guid>("ZoneId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ZoneId");

                    b.ToTable("Tariffs");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Rides.TariffHierarchyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Left")
                        .HasColumnType("integer");

                    b.Property<int>("Right")
                        .HasColumnType("integer");

                    b.Property<Guid>("TariffId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TariffId");

                    b.ToTable("TariffHierarchies");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.WebMapping.AccurateGeometryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PolylineEndIndex")
                        .HasColumnType("integer");

                    b.Property<int>("PolylineStartIndex")
                        .HasColumnType("integer");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid");

                    b.Property<string>("TrafficLoad")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("AccurateGeometries");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.WebMapping.FoundPlaceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CityOrLocality")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Geo>("Geo")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.Property<Geo>("RqGeo")
                        .HasColumnType("jsonb");

                    b.Property<string>("RqQuery")
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("FoundPlaces");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.WebMapping.RouteEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DropOffOrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Geometry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OfferId")
                        .HasColumnType("uuid");

                    b.Property<string>("OriginalJsonRs")
                        .HasColumnType("text");

                    b.Property<Guid?>("PickUpOrderId")
                        .HasColumnType("uuid");

                    b.Property<double>("TotalDistanceMtr")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalDurationSec")
                        .HasColumnType("double precision");

                    b.Property<string>("TrafficLoad")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DropOffOrderId");

                    b.HasIndex("OfferId")
                        .IsUnique();

                    b.HasIndex("PickUpOrderId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.WebMapping.WaypointEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Geo>("Geo")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("Waypoints");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Contractor.Stripe.StripeContractorCustomerEntity", b =>
                {
                    b.HasBaseType("ShuttleX.Aggregator.Ef.Entities.PaySys.Common.IdempotencyEntity");

                    b.Property<string>("Address")
                        .HasColumnType("jsonb");

                    b.Property<string>("CustomerStripeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DefaultPaymentMethodId")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Metadata")
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PreferredLocales")
                        .HasColumnType("jsonb");

                    b.ToTable("StripeContractorCustomers");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Contractor.Stripe.StripeContractorPaymentTransactionEntity", b =>
                {
                    b.HasBaseType("ShuttleX.Aggregator.Ef.Entities.PaySys.Common.IdempotencyEntity");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset?>("CompletedTransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("InitializeTransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("JsonAdditionalData")
                        .HasColumnType("jsonb");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("text");

                    b.Property<string>("PaymentMethodId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentStatusDescription")
                        .HasColumnType("text");

                    b.Property<Guid>("StripeContractorCustomerId")
                        .HasColumnType("uuid");

                    b.HasIndex("StripeContractorCustomerId");

                    b.ToTable("StripeContractorPaymentTransactions");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Passenger.Stripe.StripePassengerCustomerEntity", b =>
                {
                    b.HasBaseType("ShuttleX.Aggregator.Ef.Entities.PaySys.Common.IdempotencyEntity");

                    b.Property<string>("Address")
                        .HasColumnType("jsonb");

                    b.Property<string>("CustomerStripeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DefaultPaymentMethodId")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Metadata")
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PreferredLocales")
                        .HasColumnType("jsonb");

                    b.ToTable("StripePassengerCustomers");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Passenger.Stripe.StripePassengerPaymentTransactionEntity", b =>
                {
                    b.HasBaseType("ShuttleX.Aggregator.Ef.Entities.PaySys.Common.IdempotencyEntity");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset?>("CompletedTransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("InitializeTransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("JsonAdditionalData")
                        .HasColumnType("jsonb");

                    b.Property<string>("PaymentIntentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentMethodId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentStatusDescription")
                        .HasColumnType("text");

                    b.Property<Guid>("StripePassengerCustomerId")
                        .HasColumnType("uuid");

                    b.HasIndex("StripePassengerCustomerId");

                    b.ToTable("StripePassengerPaymentTransactions");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Saga.SagaOfferPaymentEntity", b =>
                {
                    b.HasBaseType("ShuttleX.Aggregator.Ef.Entities.PaySys.Saga.SagaPaymentEntity");

                    b.Property<Guid>("OfferId")
                        .HasColumnType("uuid");

                    b.HasIndex("OfferId");

                    b.ToTable("SagaOfferPayments");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Auth.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Auth.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Auth.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Auth.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Auth.SessionEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Auth.UserEntity", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Auth.SignInAttemptEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Auth.SessionEntity", "Session")
                        .WithOne("SignInAttempt")
                        .HasForeignKey("ShuttleX.Aggregator.Ef.Entities.Auth.SignInAttemptEntity", "SessionId");

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Auth.UserEntity", "User")
                        .WithMany("UserSignInAttempts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Auth.UserRoleEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Auth.RoleEntity", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Auth.UserEntity", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Config.ZoneClosureTableNode", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Config.ZoneEntity", "Ancestor")
                        .WithMany("Descendants")
                        .HasForeignKey("AncestorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Config.ZoneEntity", "Descendant")
                        .WithMany("Ancestors")
                        .HasForeignKey("DescendantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ancestor");

                    b.Navigation("Descendant");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Config.ZoneEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Config.ZoneEntity", "ParentZone")
                        .WithMany("Children")
                        .HasForeignKey("ParentZoneId");

                    b.Navigation("ParentZone");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Config.ZonePolygonGeoEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Config.ZoneEntity", "Zone")
                        .WithMany("Polygon")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Docs.DocBlobEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Docs.DocEntity", null)
                        .WithMany("Blobs")
                        .HasForeignKey("DocEntityId");

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileEntity", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Docs.DocEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Docs.DocMetadataEntity", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileEntity", "Profile")
                        .WithMany("Docs")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Metadata");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Docs.DocMetadataEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Config.ZoneEntity", "Zone")
                        .WithMany("DocMetadatas")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Lottery.PrizeEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Lottery.EventEntity", "Event")
                        .WithMany("Prizes")
                        .HasForeignKey("EventId");

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Lottery.TicketEntity", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId");

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileEntity", "Winner")
                        .WithMany("Prizes")
                        .HasForeignKey("WinnerId");

                    b.Navigation("Event");

                    b.Navigation("Ticket");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Lottery.TicketEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Lottery.EventEntity", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Rides.OrderEntity", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileEntity", "Owner")
                        .WithMany("Tickets")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Order");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.CardEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileEntity", "Profile")
                        .WithMany("Cards")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Config.PaySysSubscriptionTypeEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Config.ZoneEntity", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Config.PaySysTypeEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Config.ZoneEntity", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Contractor.ContractorCustomerEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Rides.Contractor.ContractorEntity", "Contractor")
                        .WithMany("CustomerAccountsOfContractor")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Contractor.ContractorDebtSubscriptionEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.PaySys.Contractor.ContractorCustomerEntity", "ContractorCustomer")
                        .WithMany("ContractorDebtSubscriptions")
                        .HasForeignKey("ContractorCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.PaySys.Contractor.ContractorPaymentTransactionEntity", "ContractorPaymentTransaction")
                        .WithOne("ContractorDebtSubscription")
                        .HasForeignKey("ShuttleX.Aggregator.Ef.Entities.PaySys.Contractor.ContractorDebtSubscriptionEntity", "ContractorPaymentTransactionId");

                    b.Navigation("ContractorCustomer");

                    b.Navigation("ContractorPaymentTransaction");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Contractor.ContractorPaymentTransactionEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.PaySys.Contractor.ContractorCustomerEntity", "ContractorCustomer")
                        .WithMany("ContractorPaymentTransaction")
                        .HasForeignKey("ContractorCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Rides.Contractor.ContractorEntity", "Contractor")
                        .WithMany("ContractorPaymentTransactions")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.PaySys.Saga.SagaPaymentEntity", "SagaPayment")
                        .WithOne("ContractorPaymentTransaction")
                        .HasForeignKey("ShuttleX.Aggregator.Ef.Entities.PaySys.Contractor.ContractorPaymentTransactionEntity", "SagaPaymentId");

                    b.Navigation("Contractor");

                    b.Navigation("ContractorCustomer");

                    b.Navigation("SagaPayment");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Contractor.ContractorSubscriptionEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.PaySys.Contractor.ContractorCustomerEntity", "ContractorCustomer")
                        .WithMany("ContractorSubscription")
                        .HasForeignKey("ContractorCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Rides.Contractor.ContractorEntity", "Contractor")
                        .WithMany("ContractorSubscriptions")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.PaySys.Contractor.ContractorPaymentTransactionEntity", "ContractorPaymentTransaction")
                        .WithOne("ContractorSubscription")
                        .HasForeignKey("ShuttleX.Aggregator.Ef.Entities.PaySys.Contractor.ContractorSubscriptionEntity", "ContractorPaymentTransactionId");

                    b.Navigation("Contractor");

                    b.Navigation("ContractorCustomer");

                    b.Navigation("ContractorPaymentTransaction");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Contractor.Stripe.StripeContractorSubscriptionEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.PaySys.Contractor.Stripe.StripeContractorCustomerEntity", "StripeContractorCustomer")
                        .WithMany("Subscriptions")
                        .HasForeignKey("StripeContractorCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.PaySys.Contractor.Stripe.StripeContractorPaymentTransactionEntity", "StripeContractorPaymentTransaction")
                        .WithOne("StripeContractorSubscription")
                        .HasForeignKey("ShuttleX.Aggregator.Ef.Entities.PaySys.Contractor.Stripe.StripeContractorSubscriptionEntity", "StripeContractorPaymentTransactionId");

                    b.Navigation("StripeContractorCustomer");

                    b.Navigation("StripeContractorPaymentTransaction");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Passenger.PassengerCustomerEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Rides.Passenger.PassengerEntity", "Passenger")
                        .WithMany("CustomerAccountsOfPassenger")
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Passenger.PassengerPaymentTransactionEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.PaySys.Passenger.PassengerCustomerEntity", "PassengerCustomer")
                        .WithMany("PassengerPaymentTransaction")
                        .HasForeignKey("PassengerCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Rides.Passenger.PassengerEntity", "Passenger")
                        .WithMany("PassengerPaymentTransactions")
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.PaySys.Saga.SagaPaymentEntity", "SagaPayment")
                        .WithOne("PassengerPaymentTransaction")
                        .HasForeignKey("ShuttleX.Aggregator.Ef.Entities.PaySys.Passenger.PassengerPaymentTransactionEntity", "SagaPaymentId");

                    b.Navigation("Passenger");

                    b.Navigation("PassengerCustomer");

                    b.Navigation("SagaPayment");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Saga.SagaStepPaymentEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.PaySys.Saga.SagaPaymentEntity", "SagaPayment")
                        .WithMany("Steps")
                        .HasForeignKey("SagaPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SagaPayment");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileAvatarEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileEntity", "Profile")
                        .WithMany("Avatars")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileDriverLicenseCategoryEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileDriverLicenseEntity", "DriverLicense")
                        .WithMany("Categories")
                        .HasForeignKey("DriverLicenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DriverLicense");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileDriverLicenseEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Docs.DocEntity", "Doc")
                        .WithMany()
                        .HasForeignKey("DocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileEntity", "Profile")
                        .WithMany("DriverLicenses")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doc");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileEmailEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileEntity", "Profile")
                        .WithMany("Emails")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Auth.UserEntity", "User")
                        .WithOne("Profile")
                        .HasForeignKey("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Rides.Contractor.ContractorEntity", "Contractor")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Rides.Passenger.PassengerEntity", "Passenger")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");

                    b.Navigation("Passenger");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileFirebaseTokenEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileEntity", "Profile")
                        .WithMany("FirebaseTokens")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileFirstNameEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileEntity", "Profile")
                        .WithMany("FirstNames")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileGeoEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileEntity", "Profile")
                        .WithMany("Geos")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileInsurancesEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Docs.DocEntity", "Doc")
                        .WithMany()
                        .HasForeignKey("DocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileEntity", "Profile")
                        .WithMany("Insurances")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doc");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileLanguageEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileEntity", "Profile")
                        .WithMany("Languages")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileLastNameEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileEntity", "Profile")
                        .WithMany("LastNames")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Profile.ProfilePassportEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Docs.DocEntity", "Doc")
                        .WithMany()
                        .HasForeignKey("DocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileEntity", "Profile")
                        .WithMany("Passports")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doc");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Profile.ProfilePatronicNameEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileEntity", "Profile")
                        .WithMany("PatronicNames")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Profile.ProfilePhoneEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileEntity", "Profile")
                        .WithMany("Phones")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileVehicleEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Rides.Contractor.ContractorVehicleEntity", "ContractorVehicle")
                        .WithOne("ProfileVehicle")
                        .HasForeignKey("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileVehicleEntity", "ContractorVehicleId");

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Docs.DocEntity", "Doc")
                        .WithMany()
                        .HasForeignKey("DocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileEntity", "Profile")
                        .WithMany("Vehicles")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContractorVehicle");

                    b.Navigation("Doc");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileZoneEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileEntity", "Profile")
                        .WithMany("Zones")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Config.ZoneEntity", "Zone")
                        .WithMany("Profiles")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Rides.Contractor.ContractorEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Auth.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Rides.TariffEntity", "PrimaryTariff")
                        .WithMany("PrimaryTariffContractors")
                        .HasForeignKey("PrimaryTariffId");

                    b.Navigation("PrimaryTariff");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Rides.Contractor.ContractorSelectedTariffsEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Rides.Contractor.ContractorEntity", "Contractor")
                        .WithMany("SelectedTariffs")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Rides.TariffEntity", "Tariff")
                        .WithMany("SelectedTariffContractors")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Rides.Contractor.ContractorStatEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Rides.Contractor.ContractorEntity", "Contractor")
                        .WithOne("Statistic")
                        .HasForeignKey("ShuttleX.Aggregator.Ef.Entities.Rides.Contractor.ContractorStatEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Rides.Contractor.ContractorVehicleEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Rides.Contractor.ContractorEntity", "Contractor")
                        .WithMany("Vehicles")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Rides.Contractor.ReceivedOfferContractorEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Rides.Contractor.ContractorEntity", "Contractor")
                        .WithMany("ReceivedOffers")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Rides.OfferEntity", "Offer")
                        .WithMany("ReceivedOfferContractors")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.WebMapping.RouteEntity", "PickUpRoute")
                        .WithMany()
                        .HasForeignKey("PickUpRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");

                    b.Navigation("Offer");

                    b.Navigation("PickUpRoute");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Rides.OfferEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Config.ZoneEntity", "DropOffZone")
                        .WithMany("DropOffOffers")
                        .HasForeignKey("DropOffZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Rides.Passenger.PassengerEntity", "Passenger")
                        .WithMany("Offers")
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Config.ZoneEntity", "PickUpZone")
                        .WithMany("PickUpOffers")
                        .HasForeignKey("PickUpZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.PaySys.Saga.SagaPaymentEntity", "SagaPayment")
                        .WithMany()
                        .HasForeignKey("SagaPaymentId");

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Rides.TariffEntity", "Tariff")
                        .WithMany("Offers")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DropOffZone");

                    b.Navigation("Passenger");

                    b.Navigation("PickUpZone");

                    b.Navigation("SagaPayment");

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Rides.OfferStopPointEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Rides.OfferEntity", "Offer")
                        .WithMany("StopPoints")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Config.ZoneEntity", "StopPointZone")
                        .WithMany("StopPointOffers")
                        .HasForeignKey("StopPointZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("StopPointZone");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Rides.OrderEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Config.ZoneEntity", "AcceptedOfferZone")
                        .WithMany("AcceptedOfferOrders")
                        .HasForeignKey("AcceptedOfferZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Rides.Contractor.ContractorEntity", "Contractor")
                        .WithMany("Orders")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Config.ZoneEntity", "DropOffZone")
                        .WithMany("DropOffOrders")
                        .HasForeignKey("DropOffZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Rides.OfferEntity", "Offer")
                        .WithOne("Order")
                        .HasForeignKey("ShuttleX.Aggregator.Ef.Entities.Rides.OrderEntity", "OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Rides.Passenger.PassengerEntity", "Passenger")
                        .WithMany("Orders")
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Config.ZoneEntity", "PickUpZone")
                        .WithMany("PickUpOrders")
                        .HasForeignKey("PickUpZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Rides.OrderEntity", "PreviousOrder")
                        .WithMany()
                        .HasForeignKey("PreviousOrderId");

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Config.ZoneEntity", "StartPointZone")
                        .WithMany("StartPointOrders")
                        .HasForeignKey("StartPointZoneId");

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Rides.TariffEntity", "Tariff")
                        .WithMany("Orders")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcceptedOfferZone");

                    b.Navigation("Contractor");

                    b.Navigation("DropOffZone");

                    b.Navigation("Offer");

                    b.Navigation("Passenger");

                    b.Navigation("PickUpZone");

                    b.Navigation("PreviousOrder");

                    b.Navigation("StartPointZone");

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Rides.OrderStopPointEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Rides.OrderEntity", "Order")
                        .WithMany("StopPoints")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Config.ZoneEntity", "StopPointZone")
                        .WithMany("StopPointOrders")
                        .HasForeignKey("StopPointZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("StopPointZone");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Rides.Passenger.PassengerEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Auth.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Rides.TariffEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Config.ZoneEntity", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Rides.TariffHierarchyEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Rides.TariffEntity", "Tariff")
                        .WithMany("Hierarchies")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.WebMapping.AccurateGeometryEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.WebMapping.RouteEntity", "Route")
                        .WithMany("AccurateGeometries")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.WebMapping.FoundPlaceEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Rides.Passenger.PassengerEntity", "Passenger")
                        .WithMany("FoundPlaces")
                        .HasForeignKey("CreatedByUserId");

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.WebMapping.RouteEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Rides.OrderEntity", "DropOffOrder")
                        .WithMany("DropOffRoutes")
                        .HasForeignKey("DropOffOrderId");

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Rides.OfferEntity", "Offer")
                        .WithOne("Route")
                        .HasForeignKey("ShuttleX.Aggregator.Ef.Entities.WebMapping.RouteEntity", "OfferId");

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Rides.OrderEntity", "PickUpOrder")
                        .WithMany("PickUpRoutes")
                        .HasForeignKey("PickUpOrderId");

                    b.Navigation("DropOffOrder");

                    b.Navigation("Offer");

                    b.Navigation("PickUpOrder");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.WebMapping.WaypointEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.WebMapping.RouteEntity", "Route")
                        .WithMany("Waypoints")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Contractor.Stripe.StripeContractorPaymentTransactionEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.PaySys.Contractor.Stripe.StripeContractorCustomerEntity", "StripeContractorCustomer")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("StripeContractorCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StripeContractorCustomer");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Passenger.Stripe.StripePassengerPaymentTransactionEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.PaySys.Passenger.Stripe.StripePassengerCustomerEntity", "StripePassengerCustomer")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("StripePassengerCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StripePassengerCustomer");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Saga.SagaOfferPaymentEntity", b =>
                {
                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.PaySys.Saga.SagaPaymentEntity", null)
                        .WithOne()
                        .HasForeignKey("ShuttleX.Aggregator.Ef.Entities.PaySys.Saga.SagaOfferPaymentEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleX.Aggregator.Ef.Entities.Rides.OfferEntity", "Offer")
                        .WithMany()
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Auth.RoleEntity", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Auth.SessionEntity", b =>
                {
                    b.Navigation("SignInAttempt");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Auth.UserEntity", b =>
                {
                    b.Navigation("Profile");

                    b.Navigation("Sessions");

                    b.Navigation("UserRoles");

                    b.Navigation("UserSignInAttempts");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Config.ZoneEntity", b =>
                {
                    b.Navigation("AcceptedOfferOrders");

                    b.Navigation("Ancestors");

                    b.Navigation("Children");

                    b.Navigation("Descendants");

                    b.Navigation("DocMetadatas");

                    b.Navigation("DropOffOffers");

                    b.Navigation("DropOffOrders");

                    b.Navigation("PickUpOffers");

                    b.Navigation("PickUpOrders");

                    b.Navigation("Polygon");

                    b.Navigation("Profiles");

                    b.Navigation("StartPointOrders");

                    b.Navigation("StopPointOffers");

                    b.Navigation("StopPointOrders");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Docs.DocEntity", b =>
                {
                    b.Navigation("Blobs");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Lottery.EventEntity", b =>
                {
                    b.Navigation("Prizes");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Contractor.ContractorCustomerEntity", b =>
                {
                    b.Navigation("ContractorDebtSubscriptions");

                    b.Navigation("ContractorPaymentTransaction");

                    b.Navigation("ContractorSubscription");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Contractor.ContractorPaymentTransactionEntity", b =>
                {
                    b.Navigation("ContractorDebtSubscription");

                    b.Navigation("ContractorSubscription");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Passenger.PassengerCustomerEntity", b =>
                {
                    b.Navigation("PassengerPaymentTransaction");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Saga.SagaPaymentEntity", b =>
                {
                    b.Navigation("ContractorPaymentTransaction");

                    b.Navigation("PassengerPaymentTransaction");

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileDriverLicenseEntity", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Profile.ProfileEntity", b =>
                {
                    b.Navigation("Avatars");

                    b.Navigation("Cards");

                    b.Navigation("Docs");

                    b.Navigation("DriverLicenses");

                    b.Navigation("Emails");

                    b.Navigation("FirebaseTokens");

                    b.Navigation("FirstNames");

                    b.Navigation("Geos");

                    b.Navigation("Insurances");

                    b.Navigation("Languages");

                    b.Navigation("LastNames");

                    b.Navigation("Passports");

                    b.Navigation("PatronicNames");

                    b.Navigation("Phones");

                    b.Navigation("Prizes");

                    b.Navigation("Tickets");

                    b.Navigation("Vehicles");

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Rides.Contractor.ContractorEntity", b =>
                {
                    b.Navigation("ContractorPaymentTransactions");

                    b.Navigation("ContractorSubscriptions");

                    b.Navigation("CustomerAccountsOfContractor");

                    b.Navigation("Orders");

                    b.Navigation("ReceivedOffers");

                    b.Navigation("SelectedTariffs");

                    b.Navigation("Statistic")
                        .IsRequired();

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Rides.Contractor.ContractorVehicleEntity", b =>
                {
                    b.Navigation("ProfileVehicle")
                        .IsRequired();
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Rides.OfferEntity", b =>
                {
                    b.Navigation("Order");

                    b.Navigation("ReceivedOfferContractors");

                    b.Navigation("Route")
                        .IsRequired();

                    b.Navigation("StopPoints");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Rides.OrderEntity", b =>
                {
                    b.Navigation("DropOffRoutes");

                    b.Navigation("PickUpRoutes");

                    b.Navigation("StopPoints");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Rides.Passenger.PassengerEntity", b =>
                {
                    b.Navigation("CustomerAccountsOfPassenger");

                    b.Navigation("FoundPlaces");

                    b.Navigation("Offers");

                    b.Navigation("Orders");

                    b.Navigation("PassengerPaymentTransactions");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.Rides.TariffEntity", b =>
                {
                    b.Navigation("Hierarchies");

                    b.Navigation("Offers");

                    b.Navigation("Orders");

                    b.Navigation("PrimaryTariffContractors");

                    b.Navigation("SelectedTariffContractors");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.WebMapping.RouteEntity", b =>
                {
                    b.Navigation("AccurateGeometries");

                    b.Navigation("Waypoints");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Contractor.Stripe.StripeContractorCustomerEntity", b =>
                {
                    b.Navigation("PaymentTransactions");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Contractor.Stripe.StripeContractorPaymentTransactionEntity", b =>
                {
                    b.Navigation("StripeContractorSubscription");
                });

            modelBuilder.Entity("ShuttleX.Aggregator.Ef.Entities.PaySys.Passenger.Stripe.StripePassengerCustomerEntity", b =>
                {
                    b.Navigation("PaymentTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
